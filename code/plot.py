import matplotlib.pyplot as plt

all_data_test_accuracy = 0.925

####### feature selection ########
max_k = 200

fisher_results = \
	[(3, 73.66666666666667, 72.5),
	(4, 74.0, 72.5),
	(5, 74.0, 72.5),
	(6, 74.33333333333333, 72.5),
	(7, 73.66666666666667, 75.0),
	(8, 77.66666666666667, 76.0),
	(9, 80.33333333333333, 80.5),
	(10, 85.33333333333333, 77.5),
	(15, 91.0, 84.5),
	(20, 91.66666666666667, 85.0),
	(25, 93.33333333333333, 86.5),
	(30, 95.33333333333333, 89.0),
	(35, 96.66666666666667, 83.5),
	(40, 97.0, 84.0),
	(45, 98.66666666666667, 86.5),
	(50, 98.66666666666667, 85.5),
	(55, 98.66666666666667, 85.0),
	(60, 98.66666666666667, 88.5),
	(65, 99.0, 88.0),
	(70, 98.66666666666667, 88.5),
	(75, 98.66666666666667, 88.5),
	(80, 98.66666666666667, 88.0),
	(85, 99.0, 88.5),
	(90, 99.66666666666667, 87.5),
	(95, 100.0, 86.5),
	(100, 100.0, 87.5),
	(105, 100.0, 89.0),
	(110, 100.0, 88.0),
	(115, 100.0, 89.0),
	(120, 100.0, 87.5),
	(125, 100.0, 89.0),
	(130, 100.0, 91.0),
	(135, 100.0, 90.5),
	(140, 100.0, 91.5),
	(145, 100.0, 91.0),
	(150, 100.0, 90.5),
	(155, 100.0, 91.0),
	(160, 100.0, 91.5),
	(165, 100.0, 91.0),
	(170, 100.0, 91.5),
	(175, 100.0, 92.0),
	(180, 100.0, 91.5),
	(185, 100.0, 90.5),
	(190, 100.0, 90.5),
	(195, 100.0, 90.5),
	(200, 100.0, 88.5),
	(205, 100.0, 88.5),
	(210, 100.0, 88.5),
	(215, 100.0, 89.5),
	(220, 100.0, 88.5),
	(225, 100.0, 88.5),
	(230, 100.0, 88.5),
	(235, 100.0, 87.5),
	(240, 100.0, 88.5),
	(245, 100.0, 88.0),
	(250, 100.0, 88.0),
	(255, 100.0, 88.0),
	(260, 100.0, 88.5),
	(265, 100.0, 88.5),
	(270, 100.0, 87.5),
	(275, 100.0, 87.5),
	(280, 100.0, 88.0),
	(285, 100.0, 89.0),
	(290, 100.0, 87.5),
	(295, 100.0, 88.0),
	(300, 100.0, 89.0)]
fisher_ks = [tup[0] for tup in fisher_results if tup[0] < max_k]
fisher_test_accuracies = [tup[2] / 100. for tup in fisher_results if tup[0] < max_k]

SFG_test_accuracies = \
	[0.70999999999999996, 0.80000000000000004, 0.82499999999999996, 0.82499999999999996, 0.82999999999999996,
	0.83999999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997,
	0.84499999999999997, 0.84999999999999998, 0.84499999999999997, 0.84999999999999998, 0.84999999999999998,
	0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997,
	0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997,
	0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997,
	0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997, 0.84499999999999997,
	0.84499999999999997, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998,
	0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998,
	0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998,
	0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998,
	0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998,
	0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998,
	0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998, 0.84999999999999998]
SFG_ks = range(1, len(SFG_test_accuracies) + 1)

# k, train_ac, test_ac
lasso_results = \
	[(1, 0.636666666667, 0.625), (3, 0.65, 0.635), (6, 0.68, 0.64), (9, 0.703333333333, 0.645),
	(10, 0.71, 0.65), (11, 0.713333333333, 0.65), (12, 0.723333333333, 0.66),
	(16, 0.736666666667, 0.695), (17, 0.75, 0.705), (21, 0.766666666667, 0.735),
	(28, 0.85, 0.76), (33, 0.856666666667, 0.765), (36, 0.866666666667, 0.79),
	(44, 0.883333333333, 0.815), (51, 0.883333333333, 0.825), (59, 0.913333333333, 0.835),
	(66, 0.926666666667, 0.85), (79, 0.936666666667, 0.84), (89, 0.943333333333, 0.855),
	(103, 0.96, 0.86), (116, 0.97, 0.855), (133, 0.97, 0.85), (149, 0.973333333333, 0.86),
	(165, 0.993333333333, 0.865), (176, 0.99, 0.875), (188, 0.993333333333, 0.875),
	(212, 0.953333333333, 0.815), (254, 0.946666666667, 0.795), (284, 0.953333333333, 0.81),
	(310, 0.976666666667, 0.85)]
lasso_ks = [tup[0] for tup in lasso_results if tup[0] < max_k]
lasso_test_accuracies = [tup[2] for tup in lasso_results if tup[0] < max_k]

# plt.figure()
# plt.plot(fisher_ks, fisher_test_accuracies, label="Fisher score")
# plt.plot(SFG_ks, SFG_test_accuracies, label="SFG")
# plt.plot(lasso_ks, lasso_test_accuracies, label="LASSO")
# plt.plot(range(max_k), [all_data_test_accuracy] * max_k, label="Raw data")

# plt.ylabel('Test accuracy')
# plt.xlabel('Number of dimensions: k')
# plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.13), ncol=4)

# plt.show()


####### feature extraction ########

PCA_results = \
	[(3, 68.66666666666667, 65.0),
	(4, 75.33333333333333, 63.5),
	(5, 77.33333333333333, 66.5),
	(6, 81.33333333333333, 78.0),
	(7, 90.0, 83.5),
	(8, 88.66666666666667, 80.5),
	(9, 90.33333333333333, 86.5),
	(10, 92.33333333333333, 84.5),
	(15, 94.33333333333333, 85.5),
	(20, 96.66666666666667, 85.0),
	(25, 97.0, 85.5),
	(30, 100.0, 89.0),
	(35, 100.0, 89.0),
	(40, 100.0, 91.0),
	(45, 100.0, 91.5),
	(50, 100.0, 91.5),
	(55, 100.0, 90.0),
	(60, 100.0, 91.0),
	(65, 100.0, 90.5),
	(70, 100.0, 88.0),
	(75, 100.0, 87.5),
	(80, 100.0, 88.0),
	(85, 100.0, 90.0),
	(90, 100.0, 89.0),
	(95, 100.0, 89.5),
	(100, 100.0, 89.5),
	(105, 100.0, 91.5),
	(110, 100.0, 91.0),
	(115, 100.0, 90.0),
	(120, 100.0, 90.0),
	(125, 100.0, 92.0),
	(130, 100.0, 92.5),
	(135, 100.0, 93.5),
	(140, 100.0, 91.5),
	(145, 100.0, 91.0),
	(150, 100.0, 92.0),
	(155, 100.0, 92.0),
	(160, 100.0, 92.0),
	(165, 100.0, 91.5),
	(170, 100.0, 91.5),
	(175, 100.0, 91.5),
	(180, 100.0, 93.0),
	(185, 100.0, 93.0),
	(190, 100.0, 91.5),
	(195, 100.0, 92.0),
	(200, 100.0, 92.0),
	(205, 100.0, 93.0),
	(210, 100.0, 93.5),
	(215, 100.0, 93.0),
	(220, 100.0, 93.0),
	(225, 100.0, 92.5),
	(230, 100.0, 92.5),
	(235, 100.0, 93.0),
	(240, 100.0, 92.5),
	(245, 100.0, 93.0),
	(250, 100.0, 93.0),
	(255, 100.0, 93.0),
	(260, 100.0, 93.0),
	(265, 100.0, 93.0),
	(270, 100.0, 92.5),
	(275, 100.0, 92.5),
	(280, 100.0, 92.0),
	(285, 100.0, 92.5),
	(290, 100.0, 92.5),
	(295, 100.0, 92.5),
	(300, 100.0, 92.5)]
PCA_ks = [tup[0] for tup in PCA_results if tup[0] < max_k]
PCA_test_accuracies = [tup[2] / 100. for tup in PCA_results if tup[0] < max_k]

autoencoder_ks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 25, 30,
	35, 40, 45, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]

autoencoder_test_accuracies = \
	[0.55000000000000004, 0.58000000000000007, 0.87, 0.80499999999999994, 0.84999999999999998, 0.82999999999999996,
	0.83499999999999996, 0.87, 0.84499999999999997, 0.79999999999999996, 0.83999999999999997, 0.89500000000000002,
	0.89500000000000002, 0.85999999999999999, 0.87, 0.87, 0.87, 0.88500000000000001, 0.85499999999999998,
	0.90500000000000003, 0.85999999999999999, 0.85999999999999999, 0.92999999999999994, 0.88500000000000001,
	0.91500000000000004, 0.87, 0.91500000000000004, 0.92999999999999994, 0.93500000000000005, 0.89500000000000002,
	0.92000000000000004, 0.89000000000000001, 0.92000000000000004, 0.91500000000000004, 0.91000000000000003,
	0.90000000000000002]

plt.figure()
plt.plot(PCA_ks, PCA_test_accuracies, label="PCA")
plt.plot(autoencoder_ks, autoencoder_test_accuracies, label="2 layer Autoencoder")

plt.plot(fisher_ks, fisher_test_accuracies, label="Fisher score")
plt.plot(SFG_ks, SFG_test_accuracies, label="SFG")
plt.plot(lasso_ks, lasso_test_accuracies, label="LASSO")
plt.plot(range(max_k), [all_data_test_accuracy] * max_k, label="Raw data")

plt.ylabel('Test accuracy')
plt.xlabel('Number of dimensions: k')
plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.13), ncol=3)

plt.show()